#TODO: Add  image: lsuves/<appname>  to each app? (pushes them to default registry or summat)

version: "3.8"

services:
    db:
        build: db
        restart: always
        secrets:
            - db-password
        volumes:
            - db-data:/var/lib/postgresql/data
        networks:
            - backend-network
        healthcheck:
            # For details see https://github.com/compose-spec/compose-spec/blob/master/spec.md#healthcheck
            # Taken from https://github.com/peter-evans/docker-compose-healthcheck
            # compare with: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/docker-compose.yaml
            # Consider adding a start-period and reducing interval as above

            # Note that this must be run as the database owner: 
            # https://github.com/peter-evans/docker-compose-healthcheck/issues/4#issuecomment-497930240
            # Moving this to the Dockerfile after declaring the user might avoid that
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 5s
            retries: 5

    backend:
        build:
            context: backend
            target: production
#        ports:
#            - "8000:8000"
        expose:
            - "8000"
        secrets:
            - db-password
        networks:
            - backend-network
            - frontend-network
        depends_on:
            # For details see https://github.com/compose-spec/compose-spec/blob/master/spec.md#long-syntax-1
            db:
                condition: service_healthy
        environment:
            - "VIRTUAL_HOST=lsuves.org.uk,www.lsuves.org.uk,blotch.lsuves.org.uk,lsuves.com,www.lsuves.com,blotch.lsuves.com"
            # Routes /api addresses to the backend API. However, in order to allow /admin to work for the admin pages, the 
            # Nginx config will need to be set manually (but since we don't currently use it this is a fine sacrifice).
            - "VIRTUAL_PATH=/api"
            - "VIRTUAL_DEST="
            - "LETSENCRYPT_HOST=lsuves.org.uk,www.lsuves.org.uk,blotch.lsuves.org.uk,lsuves.com,www.lsuves.com,blotch.lsuves.com"

    cron:
        build:
            context: backend
            target: cron
        secrets:
            - db-password
        networks:
            - backend-network
        depends_on:
            db:
                condition: service_healthy

    frontend:
        # Might need to specify production image
        build: frontend
#        ports:
            # - "80:80"
            # Port 3000 is only used for development
#            - "3000:3000"
        expose:
            - "3000"
        networks:
            - frontend-network
        depends_on:
            - backend
        environment:
            - "VIRTUAL_HOST=lsuves.org.uk,www.lsuves.org.uk,blotch.lsuves.org.uk,lsuves.com,www.lsuves.com,blotch.lsuves.com"
            - "VIRTUAL_PATH=/"
            - "LETSENCRYPT_HOST=lsuves.org.uk,www.lsuves.org.uk,blotch.lsuves.org.uk,lsuves.com,www.lsuves.com,blotch.lsuves.com"

    nginx-proxy:
        image: nginxproxy/nginx-proxy
        restart: always
        ports:
            - "443:443"
            - "80:80"
        volumes:
            - certs:/etc/nginx/certs:ro
            - html:/usr/share/nginx/html
            - vhost:/etc/nginx/vhost.d
            - /var/run/docker.sock:/tmp/docker.sock:ro
        networks:
            - frontend-network
        depends_on:
            - frontend

    nginx-proxy-acme:
        image: nginxproxy/acme-companion
        environment:
            - DEFAULT_EMAIL=webmaster@lsuvgs.org.uk
            # Use this for testing (https://github.com/nginx-proxy/acme-companion/blob/main/docs/Let's-Encrypt-and-ACME.md#test-certificates):
            # - ACME_CA_URI=https://acme-staging-v02.api.letsencrypt.org/directory
        volumes_from:
            - nginx-proxy
        volumes:
            - certs:/etc/nginx/certs:rw
            - acme:/etc/acme.sh
            - /var/run/docker.sock:/var/run/docker.sock:ro
        depends_on:
            - nginx-proxy

volumes:
    db-data:
    certs:
    html:
    vhost:
    acme:

secrets:
    db-password:
        file: db/password.txt

networks:
    backend-network:
    frontend-network:
